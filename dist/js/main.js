"use strict";!function(){var initSelection,props,propsBoolFields,propsFields,selectObject,selectedObj,updateProperties;selectedObj=null,props=$(".js-obj-properties"),propsFields=null,propsBoolFields=null,selectObject=function(e){var t,r,n,a,o,s,p;for(selectedObj=a=e.target,props.empty(),t=function(e,r){var n,a,o,s,p;for(n=0,a=(p=Object.keys(e)).length;n<a;n++)o=p[n],r.indexOf(o)<0&&r.push(o);return"Object"!==(s=Object.getPrototypeOf(e)).constructor.name&&t(s,r),r},r=0,n=(s=t(a,[]).sort()).length;r<n;r++)switch(typeof(p=a[o=s[r]])){case"boolean":props.append(`<div class='input-group mb-1'> <input type='text' class='form-control bg-light' disabled  value='${o}'> <div class='input-group-append'> <div class='input-group-text'> <input type='checkbox' class='js-obj-prop js-prop-bool' data-name='${o}' ${p?"checked":""}> </div> </div> </div>`);break;case"string":props.append(`<div class='input-group mb-1'> <div class='input-group-prepend'> <span class='input-group-text'>${o}</span> </div> <input type='text' class='form-control js-obj-prop js-prop-string' data-name='${o}' value='${p}'> </div>`);break;case"number":props.append(`<div class='input-group mb-1'> <div class='input-group-prepend'> <span class='input-group-text'>${o}</span> </div> <input type='number' class='form-control js-obj-prop js-prop-number' data-name='${o}' value='${p}'> </div>`)}return $(".js-prop-string").on("input change",(function(){var e;return e=$(this),null!=selectedObj?selectedObj.set(e.data("name"),e.val()):void 0})),$(".js-prop-number").on("input change",(function(){var e;return e=$(this),null!=selectedObj?selectedObj.set(e.data("name"),+e.val()):void 0})),$(".js-prop-bool").on("input change",(function(){var e;return e=$(this),null!=selectedObj?selectedObj.set(e.data("name"),e.prop("checked")):void 0})),propsFields=$(".js-prop-string,.js-prop-number"),propsBoolFields=$(".js-prop-bool")},updateProperties=function(){var e;if(e=selectedObj)return propsFields.each((function(){var t;return(t=$(this)).val(e[t.data("name")])})),propsBoolFields.each((function(){var t;return(t=$(this)).prop("checked",e[t.data("name")])}))},initSelection=function(e){return e.on("object:selected",selectObject),e.on("object:modified",updateProperties)},$(document).ready((function(){var canvas,codemirror,data,render,resize;return canvas=new fabric.Canvas("canvas"),resize=function(){return canvas.setWidth($(window).width()),canvas.setHeight($(window).height()-$("#canvas-wrapper").offset().top)},resize(),$(window).on("resize",resize),$(".js-button-figure").click((function(){var e,t;return e=$(this),t=new(fabric[e.data("obj")])(JSON.parse(e.data("prop").replace(/\'/g,'"'))),canvas.add(t),t.center()})),data=[{name:"node1",id:1,children:[{name:"child1",id:2},{name:"child2",id:3}]},{name:"node2",id:4,children:[{name:"child3",id:5}]}],$(".treeview").tree({data:data,autoOpen:!0,dragAndDrop:!0}),codemirror=CodeMirror.fromTextArea(document.getElementById("codearea"),{extraKeys:{"Ctrl-Space":"autocomplete"},mode:{name:"javascript",globalVars:!0}}),$(".js-code-excec-btn").click((function(){var obj;return obj=eval(codemirror.getValue()),canvas.add(obj),obj.center()})),initSelection(canvas),render=function(e){return canvas.renderAll(),window.requestAnimationFrame(render)},render(0)}))}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
